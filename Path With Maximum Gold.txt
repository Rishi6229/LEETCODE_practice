In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.


class Solution {
    int r = 0;
    int c = 0;
    int max = 0;
    public int getMaximumGold(int[][] grid) {
        r = grid.length;
        c = grid[0].length;
        for(int i=0; i<r; i++)
        {
            for(int j = 0; j<c; j++)
            {
                if(grid[i][j] != 0)
                {
                    dfs(grid , i , j , 0);
                }
            }
        }
        return max;
    }
    
    
    
    
    private void dfs(int grid[][], int i , int j , int curr)
    {
        if(i < 0 || i >= r || j < 0 || j >=c || grid[i][j] == 0)
        {
            max = Math.max(max,curr);
            return;
        }
        
        
        
        int val = grid[i][j];
        grid[i][j] = 0;
        dfs(grid , i+1 , j , curr+val);
        dfs(grid , i-1 , j , curr+val);
        dfs(grid , i , j +1, curr+val);
        dfs(grid , i , j - 1, curr+val);
        grid[i][j] = val;
        
        
        
        
        
    }
    
  
    
    
}
